Class: ConfigParser config (json)
[
{path:{}, {}},
{epoch: {start_epoch},
{epochs}},
{}
]


Class Datagenerator - (Dataloader)
Class DataProcessor: train/test/validate, augmentation
Class Logger (json/ yaml)
Class LogVisualizer (json/ yaml)
Class ModelManager
Class ModelTrainer
Class ModelEvaluator

-> Read as global dict
-> Divide by state (data (raw, preprocessed, ), train, evaluation, checkpoint, log, ...)


8 1 1 
train -> train
validate -> validate -> for choosing checkpoint
test -> evaluate



Data -> Modelling -> Validating -> Visualization



Model versioning
Task_name | Model_name | Dataset_name          | Evaluation
                       | click -> pop up info  | click -> pop up info


.pt -> {
    epoch
    model_state_dict
    optimizer_state_dict

    metadata:
    {
        data: dataset_name
        status: xperimental, testing, integration, prod/released
        version: 1.0
        timestamp: nam_thang_ngay

    }
}


data versioning
    Trong - raw
        x: # of samples (manually added) -> need an update rule
        y: streaming -> update version monthly
        changine rate: 1:12

    Thinh - raw
        x: the same
        y: stable
        z: unstable

    
    need alpha to automatically switch b/t y & z
    can be affected by:
        # of samples
        streaming




How to storing metadata:
    neo4j: visual + traceable if dataset is compiled from another
    file: not visual & hard to trace

What will have in metadata:
{
    Description
    Owner
    Size
        Sample
        Storage
    [Compiled from]: manual or pointer
}



NVIDIA container toolkit
https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html

Turn on GPU with Docker compose
https://docs.docker.com/compose/gpu-support/

